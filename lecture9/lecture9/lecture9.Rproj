---
title: "lecture9"
author: "Reggie Blackwell"
date: "May 2, 2018"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
#bring in data
wisc.df <- read.csv("https://bioboot.github.io/bggn213_S18/class-material/WisconsinCancer.csv", header=TRUE)
```


```{r}
#convert the featrues of the data: wisc.data
wisc.data <-  as.matrix(wisc.df[,-c(1:2,33)])#remove the 33 column due to NA's in data
```

```{r}
#set the row names of wisc.data
row.names(wisc.data) <- wisc.df$id
head(wisc.data)
```

```{r}
#look at info
table(wisc.df$diagnosis)
```

```{r}
#Create diagnosis vector by completing the missing code
#diagnosis <- as.numeric(wisc.df$diagnosis, )
#x <- c("barry","chris","mary","pete")
#x[-c[-1]
#x=="mary"
#head(diagnosis)
diagnosis <- as.numeric(wisc.df$diagnosis=="M")
sum(diagnosis)
dim(diagnosis)
length(diagnosis)

grep("_mean", colnames(wisc.data), value =TRUE)

```

```{r}
grep("_mean", colnames(wisc.data), value =TRUE)
```

```{r}
#mean and sd deviations of columns to determine if they should be scaled
colMeans(wisc.data)
#plot the colmeans
plot(colMeans(wisc.data), type ="o")#data needs to be scaled


#apply sd function across all the columns
#if the means are different then we will not have to do it
apply(wisc.data,2,sd)
#plot the sd 
plot(apply(wisc.data,2,sd), type ="o")
```

```{r}
#error message due to scale, probably the "x" in dataset
wisc.pr <- prcomp(wisc.data, scale =TRUE)
plot(wisc.pr)
summary(wisc.pr)
```

```{r}
#plot out the data from pca comparing pc1 and pc2
biplot(wisc.pr)
```

```{r}
plot(wisc.pr$x[,1],wisc.pr$x[,2], col=diagnosis+2, xlab="PC1", ylab="PC2")

#plot component PC1 and PC3
plot(wisc.pr$x[,1],wisc.pr$x[,3], col=diagnosis+2, xlab="PC1", ylab="PC3")
#screeplot to find elbow in data
screeplot(wisc.pr)
```

```{r}
# to find the variance in the data and the proportion explained
pr.var <- wisc.pr$sdev^2
# Variance explained by each principal component: pve
pve <- wisc.pr$sdev^2  / sum(wisc.pr$sdev^2)

# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component", 
     ylab = "Proportion of Variance Explained", 
     ylim = c(0, 1), type = "o") 
```

```{r}
# Alternative scree plot of the same data, note data driven y-axis
barplot(pve, ylab = "Precent of Variance Explained",
     names.arg=paste0("PC",1:length(pve)), las=2, axes = FALSE)
axis(2, at=pve, labels=round(pve,2)*100 )

```

```{r}
# Plot cumulative proportion of variance explained
plot(cumsum(pve), xlab = "Principal Component", 
     ylab = "Cumulative Proportion of Variance Explained", 
     ylim = c(0, 1), type = "o")
```

```{r}
#par()
# Plot cumulative proportion of variance explained
plot(cumsum(pve), xlab = "Principal Component", 
     ylab = "Cumulative Proportion of Variance Explained", 
     ylim = c(0, 1), type = "o")
```

```{r}
# Scale the wisc.data data: data.scaled
data.scaled <- scale(wisc.data)
```

```{r}
#calculate euclidean distance between points
data.dist <- dist(data.scaled, method = "euclidean")
```

```{r}
wisc.hclust <- hclust(data.dist,method = "complete")

```

```{r}
plot(wisc.hclust)
```

```{r}
wisc.hclust.clusters <- cutree(wisc.hclust, k=4)
```

```{r}
table(wisc.hclust.clusters, diagnosis)
```

```{r}

```

```{r}
wisc.km <-  kmeans(wisc.data, centers = 2, nstart = 20)
table(wisc.km$cluster, diagnosis)
```

```{r}
table(wisc.km$cluster, wisc.hclust.clusters)
```

```{r}
## Use the distance along the first 7 PCs for clustering i.e. wisc.pr$x[, 1:7]
wisc.pr.hclust <- hclust(dist(wisc.pr$x[,1:3]), method="ward.D2")
wisc.pr.hclust.clusters <- cutree(wisc.pr.hclust, k=2)
table(wisc.pr.hclust.clusters, diagnosis)
plot(wisc.pr.hclust)#clustering based on PC components
```

```{r}
plot(wisc.pr$x[,1:2], col=wisc.pr.hclust.clusters)
```

```{r}
#getting better signal to noise ratio using PC due to capturing most of the variance-filtering everything past PC3 to remove the noise 
table(wisc.pr.hclust.clusters,diagnosis)
```

```{r}
library("rgl")
plot3d(wisc.pr$x[,1:3], type ="s", zlab="PC 3", cex =1.5)
```

```{r}
url <-  "https://tinyurl.com/new-samples-CSV"
new <-  read.csv(url)
npc <-  predict(wisc.pr, newdata = new)

plot(wisc.pr$x[,1:2], col=wisc.pr.hclust.clusters)
points(npc[,1], npc[,2], col=c("purple","blue"), pch=16, cex=3)
```

